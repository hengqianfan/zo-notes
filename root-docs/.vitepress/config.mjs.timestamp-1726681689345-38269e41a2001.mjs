// root-docs/.vitepress/config.mjs
import { defineConfig } from "file:///E:/codes/web/zo-notes/node_modules/.pnpm/vitepress@1.0.0-rc.45_@algolia+client-search@4.24.0_async-validator@4.2.5_postcss@8.4.47_sass_u5mxsuvddunlivdsppayr42zde/node_modules/vitepress/dist/node/index.js";

// root-docs/.vitepress/myscript/autoSidebar.js
import path from "node:path";
import fs from "node:fs";
var __vite_injected_original_dirname = "E:\\codes\\web\\zo-notes\\root-docs\\.vitepress\\myscript";
var root = __vite_injected_original_dirname.split(".vitepress")[0];
var ignore_list = ["index.md", ".vitepress", "node_modules", ".idea", "assets", "embedded_notes", "xrepo"];
var isDir = (path2) => fs.lstatSync(path2).isDirectory();
var process_filename = (momo) => {
  let res1 = momo.split(".md")[0];
  let res2 = res1.split(" ")[1];
  return res2;
};
var process_filename_part = (momo) => {
  let res1 = momo.split(".md")[0];
  return res1;
};
var create_sidebar = (dir_unprocessed, folder_level) => {
  const dir_path = path.join(root, dir_unprocessed);
  if (!fs.existsSync(dir_path)) {
    return;
  }
  const files_all = fs.readdirSync(dir_path);
  const is_effective = (arr1, arr2) => Array.from(new Set(arr1.filter((item) => !new Set(arr2).has(item))));
  const files_effective = is_effective(files_all, ignore_list);
  const new_level = 0;
  const create_list = (items, repo_path, dir_unprocessed2, folder_level2, now_level) => {
    const final_list = [];
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      const item_path = path.join(repo_path, item);
      const isDir_res = isDir(item_path);
      if (isDir_res) {
        const new_items = fs.readdirSync(item_path);
        let dir_name_processed = process_filename(item);
        let new_floder = `${dir_unprocessed2}/${item}`;
        if (!now_level) {
          now_level = 1;
        }
        let next_level = now_level + 1;
        let collapsed_state = Boolean;
        if (now_level > folder_level2) {
          collapsed_state = true;
        } else {
          collapsed_state = false;
        }
        final_list.push({
          text: dir_name_processed,
          collapsed: collapsed_state,
          items: create_list(new_items, item_path, new_floder, folder_level2, next_level)
        });
      } else {
        const file_name = path.basename(item_path);
        const file_ext = path.extname(item_path);
        if (file_ext !== ".md") {
          continue;
        }
        let file_name_processed = process_filename(file_name);
        let file_name_processed_part = process_filename_part(file_name);
        final_list.push({
          text: file_name_processed,
          link: `${dir_unprocessed2}/${file_name}`
        });
      }
    }
    return final_list;
  };
  return create_list(files_effective, dir_path, dir_unprocessed, folder_level, new_level);
};
var setAllSidebars = (arr) => {
  let obj = {};
  for (let i = 0; i < arr.length; i++) {
    let repo = arr[i];
    let repo_name = repo[0];
    let level = repo[1];
    obj[repo_name] = create_sidebar(repo_name, level);
  }
  return obj;
};

// root-docs/.vitepress/config/nav.js
var myNav = [
  { text: "\u6587\u7AE0\u805A\u5408 \u{1F4F0}", link: "/zo-pages/all-articles" },
  { text: "\u7B14\u8BB0\u805A\u5408 \u{1F4DA}", link: "/zo-pages/all-notes" },
  {
    text: "\u5168\u6808\u77E5\u8BC6",
    items: [
      {
        text: "\u57FA\u7840\u90E8\u5206",
        items: [
          { text: "HTML", link: "/zo-repo/html/00 \u7B80\u8FF0", icon: "html" },
          { text: "SCSS", link: "/zo-repo/scss/00 \u7B80\u8FF0", icon: "sass" },
          { text: "JavaScript", link: "/zo-repo/javascript/00 \u7B80\u8FF0", icon: "javascript" },
          { text: "network-request", link: "/zo-repo/network-request/00 \u7B80\u8FF0", icon: "network" }
        ]
      },
      {
        text: "\u8FDB\u9636\u77E5\u8BC6",
        items: [
          { text: "Node.js", link: "/zo-repo/nodejs/00 \u7B80\u8FF0", icon: "nodejs" },
          { text: "TypeScript", link: "/zo-repo/typescript/01 \u57FA\u7840\u5185\u5BB9/01 \u4ECB\u7ECD\u4E0E\u5B89\u88C5", icon: "typescript" },
          { text: "React", link: "/zo-repo/react/00 \u7B80\u8FF0", icon: "react" },
          { text: "Vue", link: "/zo-repo/vue/00 \u7B80\u8FF0", icon: "vue" },
          { text: "Componement", link: "/zo-repo/component-library/00 \u7B80\u8FF0", icon: "note" }
        ]
      },
      {
        text: "\u5E94\u7528\u9636\u6BB5",
        items: [
          { text: "Express", link: "/zo-repo/express/00 \u7B80\u8FF0", icon: "express" },
          { text: "Uniapp", link: "/zo-repo/uniapp/00 \u7B80\u8FF0", icon: "uniapp" },
          { text: "Electron", link: "/zo-repo/electron/00 \u7B80\u8FF0", icon: "electron" },
          { text: "Docker", link: "/zo-repo/docker/00 \u7B80\u8FF0", icon: "docker" },
          { text: "MySQL", link: "/zo-repo/mysql/00 \u7B80\u8FF0", icon: "mysql" },
          { text: "Sqlite", link: "/zo-repo/sqlite/00 \u7B80\u8FF0", icon: "sqlite" },
          { text: "cocos", link: "/zo-repo/cocos-creator/00 \u7B80\u8FF0", icon: "cocoscreator" }
        ]
      }
    ]
  },
  {
    text: "\u4E13\u9898\u533A",
    items: [
      { text: "\u524D\u7AEF\u751F\u6001\u5708", link: "/zo-pages/topic-web-design" },
      { text: "\u5EFA\u7AD9\u4E13\u9898", link: "/zo-repo/build-site/00 \u7B80\u8FF0" }
    ]
  },
  {
    text: "\u5176\u4ED6\u6742\u9879",
    items: [
      { text: "\u7F51\u5740\u5BFC\u822A \u{1F680}", link: "/zo-pages/all-sites" },
      { text: "\u5173\u4E8E\u672C\u7AD9 \u{1F381}", link: "/zo-pages/about" },
      { text: "\u66F4\u65B0\u65E5\u5FD7 \u{1F4DD}", link: "/zo-pages/history-updated#momo" },
      { text: "\u6E38\u620F\u4E16\u754C \u{1F3AE}", link: "/zo-repo/game/00 \u7B80\u8FF0" },
      { text: "\u6CD5\u5F8B\u7B14\u8BB0 \u{1F4D3}", link: "https://zocv.github.io/mo-notes-for-law/" },
      {
        text: "\u6682\u672A\u5F00\u653E",
        items: [
          { text: "\u5B9E\u9A8C", link: "/zo-pages/test" },
          { text: "\u6211\u7684\u4EFB\u52A1", link: "/zo-pages/task" },
          { text: "\u6211\u7684\u5907\u5FD8\u5F55", link: "/me-repo/records/00 \u7B80\u8FF0" },
          { text: "\u672C\u7AD9GP\u955C\u50CF", link: "https://zocv.github.io/zo-notes/" },
          { text: "\u672C\u7AD9\u672C\u5730\u5730\u5740", link: "http://localhost:8081/zo-notes/" }
        ]
      }
    ]
  }
];

// root-docs/.vitepress/config/theme.js
var themeConfig = {
  siteTitle: "zo-notes",
  logo: "/icon/png/logo.png",
  nav: myNav,
  sidebar: setAllSidebars([
    ["/zo-repo/computer-init", 1],
    ["/zo-repo/build-site", 1],
    ["/zo-repo/computer", 1],
    ["/zo-repo/html", 1],
    ["/zo-repo/scss", 1],
    ["/zo-repo/javascript", 0],
    ["/zo-repo/typescript", 1],
    ["/zo-repo/nodejs", 1],
    ["/zo-repo/network-request", 1],
    ["/zo-repo/react", 1],
    ["/zo-repo/vue", 1],
    ["/zo-repo/mysql", 1],
    ["/zo-repo/sqlite", 1],
    ["/zo-repo/electron", 1],
    ["/zo-repo/uniapp", 1],
    ["/zo-repo/docker", 1],
    ["/zo-repo/express", 1],
    ["/zo-repo/vitepress", 1],
    ["/zo-repo/github", 1],
    ["/zo-repo/vscode", 1],
    ["/zo-repo/python", 1],
    ["/zo-repo/cocos-creator", 1],
    ["/zo-repo/game", 1],
    ["/zo-repo/component-library", 1],
    ["/me-repo/records", 1]
  ]),
  // outline: [1, 6],
  outline: {
    label: "\u9875\u9762\u76EE\u5F55",
    // 因为要占用h1做网页副标题
    level: [2, 6]
  },
  // lastUpdated: true,
  search: {
    provider: "local",
    // provider: 'algolia'
    options: {
      translations: {
        button: {
          buttonText: "\u5168\u7AD9\u641C\u7D22",
          buttonAriaLabel: "\u641C\u7D22\u6587\u6863"
        },
        modal: {
          noResultsText: "\u65E0\u6CD5\u627E\u5230\u76F8\u5173\u7ED3\u679C",
          resetButtonTitle: "\u6E05\u9664\u67E5\u8BE2\u6761\u4EF6",
          footer: {
            selectText: "\u9009\u62E9",
            navigateText: "\u5207\u6362"
          }
        }
      }
    }
  },
  docFooter: {
    prev: "\u4E0A\u4E00\u7BC7",
    next: "\u4E0B\u4E00\u7BC7"
  },
  socialLinks: [
    { icon: "github", link: "https://github.com/hengqianfan/mo-notes" }
  ],
  backToTop: {
    text: "\u8FD4\u56DE\u9876\u90E8"
  },
  returnToTopLabel: "\u56DE\u5230\u9876\u90E8",
  lastUpdated: {
    text: "\u6700\u540E\u66F4\u65B0\u65F6\u95F4",
    formatOptions: {
      dateStyle: "full",
      timeStyle: "short"
    }
  },
  editLink: {
    pattern: "https://github.com/hengqianfan/mo-notes/edit/main/root-docs/:path"
  }
};

// root-docs/.vitepress/config.mjs
import markdownItFootnote from "file:///E:/codes/web/zo-notes/node_modules/.pnpm/markdown-it-footnote@4.0.0/node_modules/markdown-it-footnote/index.mjs";

// root-docs/.vitepress/myscript/myMermaid.js
import mermaid from "file:///E:/codes/web/zo-notes/node_modules/.pnpm/mermaid@11.2.1/node_modules/mermaid/dist/mermaid.core.mjs";
function mermaidPlugin(md) {
  const fence = md.renderer.rules.fence?.bind(md.renderer.rules);
  md.renderer.rules.fence = (tokens, idx, options, env, self) => {
    const token = tokens[idx];
    const language = token.info.trim();
    if (language.startsWith("mermaid")) {
      return `<Mermaid id="mermaid-${idx}" code="${encodeURIComponent(token.content)}"></Mermaid>`;
    }
    return fence(tokens, idx, options, env, self);
  };
}

// root-docs/.vitepress/config.mjs
import { demoPreviewPlugin } from "file:///E:/codes/web/zo-notes/node_modules/.pnpm/@vitepress-code-preview+plugin@1.0.6/node_modules/@vitepress-code-preview/plugin/dist/index.js";
var config_default = defineConfig({
  lang: "cn",
  title: "zo-notes",
  description: "A VitePress Site",
  base: "/zo-notes/",
  // 标签页的LOGO
  head: [
    ["link", { rel: "icon", href: "./icon/png/logo.png" }]
  ],
  outDir: "./.vitepress/dist",
  // 关闭深色模式
  appearance: false,
  // 开启显示更新时间
  lastUpdated: true,
  themeConfig,
  markdown: {
    config: (md) => {
      md.use(markdownItFootnote);
      md.use(mermaidPlugin);
    },
    Math: true
  }
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
